// Imports
import Stream from "./Stream"
import { reverse, init, find } from "list"
// Types
export enum WasmSection {
  // SectionType(Length, Body)
  CustomSection(Number, Stream.Stream),
  TypeSection(Number, Stream.Stream),
  ImportSection(Number, Stream.Stream),
  FunctionSection(Number, Stream.Stream),
  TableSection(Number, Stream.Stream),
  MemorySection(Number, Stream.Stream),
  GlobalSection(Number, Stream.Stream),
  ExportSection(Number, Stream.Stream),
  StartSection(Number, Stream.Stream),
  ElementSection(Number, Stream.Stream),
  CodeSection(Number, Stream.Stream),
  DataSection(Number, Stream.Stream),
  DataCountSection(Number, Stream.Stream),
}
export record LinkingInfo {
  // Language Import Identifier
  importIdentifier: String,
  // The file functionOffsetGlobal Index
  functionOffsetGlobal: Number,
  // Function Reference List<Positions> relative to the code section
  functionReferences: List<Number>,
  // Type References List<Positions> relative to the code section
  typeReferences: List<Number>,
  // Global References List<Positions> relative to the code section
  globalReferences: List<Number>,
}
// SectionDecoder
export let sectionDecoder = stream => {
  let mut sections = []
  while (Stream.remainingLength(stream) > 0) {
    // Get Section Id
    let sectionID = Stream.nextByte(stream)
    // Get The Section Length
    let sectionLength = Stream.nextUIntLEB128(stream)
    // Get The Section Contents
    let sectionContents = Stream.nextStreamSlice(stream, sectionLength)
    // Match The Section
    let section = match (sectionID) {
      0x00 => CustomSection(sectionLength, sectionContents),
      0x01 => TypeSection(sectionLength, sectionContents),
      0x02 => ImportSection(sectionLength, sectionContents),
      0x03 => FunctionSection(sectionLength, sectionContents),
      0x04 => TableSection(sectionLength, sectionContents),
      0x05 => MemorySection(sectionLength, sectionContents),
      0x06 => GlobalSection(sectionLength, sectionContents),
      0x07 => ExportSection(sectionLength, sectionContents),
      0x08 => StartSection(sectionLength, sectionContents),
      0x09 => ElementSection(sectionLength, sectionContents),
      0x0a => CodeSection(sectionLength, sectionContents),
      0x0b => DataSection(sectionLength, sectionContents),
      0x0c => DataCountSection(sectionLength, sectionContents),
      _ => fail "Invalid Section",
    }
    // Add The Section To The List
    sections = [section, ...sections]
  }
  // Check If There Were Any Errors
  reverse(sections)
}
let getRefs = (s) => init(Stream.nextUIntLEB128(s), (_) => Stream.nextUIntLEB128(s))
export let getLinkingInfo = (sections) => {
  // Find The LinkingInfo Section
  let linkingInfo = find((section) => match (section) {
    CustomSection(_, stream) when Stream.nextString(stream) == "LinkingInfo" => true,
    _ => false,
  }, sections)
  // If We Did Not Find The Section Fail
  match (linkingInfo) {
    Some(CustomSection(_, stream)) => {
      // Package
      {
        importIdentifier: Stream.nextString(stream),
        functionOffsetGlobal: Stream.nextUIntLEB128(stream),
        functionReferences: getRefs(stream),
        typeReferences: getRefs(stream),
        globalReferences: getRefs(stream),
      }
    },
    _ => fail "Linking Info Section Not Found"
  }
}
