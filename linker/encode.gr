import List from "list"
import List from "list"
import String from "string"
import Char from "char"
import WasmDecoder from "./Decoder/WasmDecoder"
// Encoders
// Encode Primitives
export let encodeUIntLeb128 = value => {
  let mut value = value
  let mut buffer = []
  while (true) {
    let mut byte = value & 0x7f
    value = value >>> 7
    if (value != 0) {
      byte = byte | 0x80
    }
    buffer = [byte, ...buffer]
    if (value == 0) break
  }
  List.reverse(buffer)
}
export let _encodeString = str => {
  List.init(String.length(str), index => {
    // TODO: Switch To Using String.charCodeAt when #1376 lands
    Char.code(String.charAt(index, str))
  })
}
export let encodeString = str => {
  let stringContents = _encodeString(str)
  List.append(encodeUIntLeb128(List.length(stringContents)), stringContents)
}
// Wasm Encoders
export let rec encodeWasmType = wasmType => {
  match (wasmType) {
    WasmDecoder.WasmI32 => [0x7f],
    WasmDecoder.WasmI64 => [0x7e],
    WasmDecoder.WasmF64 => [0x7c],
    WasmDecoder.WasmF32 => [0x7d],
    WasmDecoder.WasmFuncType(params, results) => {
      let paramCount = List.length(params)
      let resultCount = List.length(results)
      let mut encodedFuncType = [0x60, ...encodeUIntLeb128(paramCount)]
      List.forEach(param => {
        encodedFuncType = List.append(encodedFuncType, encodeWasmType(param))
      }, params)
      encodedFuncType = List.append(
        encodedFuncType,
        encodeUIntLeb128(resultCount)
      )
      List.forEach(result => {
        encodedFuncType = List.append(encodedFuncType, encodeWasmType(result))
      }, results)
      encodedFuncType
    },
  }
}
let encodeImportDescription = importDescription => {
  match (importDescription) {
    WasmDecoder.FunctionImport(typeRef) => {
      [0x00, ...encodeUIntLeb128(typeRef)]

      // typeDescription, typeRef
    },
    // TODO: Table Import
    // TODO: Memory Import
    WasmDecoder.GlobalImport(mutable, wasmType) => {
      let constant = if (mutable) 0x01 else 0x00
      [0x03, encodeWasmType(wasmType), constant]

      // typeDescription, typeRef
    },
  }
}
export let encodeImport = (importModule, importName, importDescription) => {
  let importModule = encodeString(importModule)
  let importName = encodeString(importName)
  print(importDescription)
  let importDescription = encodeImportDescription(importDescription)
  print(importDescription)
  // Combine Into One Array
  Array.concat([importModule, importName, importDescription])
}
