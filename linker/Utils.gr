import WasmI32 from "runtime/unsafe/wasmi32"
import { coerceNumberToWasmI32, reducedInteger } from "runtime/numbers"
import List from "list"
import Bytes from "bytes"

@unsafe
let tagSimple = x => {
  WasmI32.xor(WasmI32.shl(x, 1n), 1n)
}

/*
 * @section Byte Utils: Utilities For Working With Bytes
 */

/**
 * Used To Get A Slice Of A Bytes element As An Array
 * 
 * @param bytes: The Byte Element You Want To Operate On
 * @param start: The Start Of The Slice
 * @param end: THe End Of The Slice
 * 
 * @returns An Array Of Numbers Representing The Bytes and the new offset
 */
@unsafe
export let getByteSlice = (bytes: Bytes, start: Number, end: Number) => {
  let ptr = WasmI32.fromGrain(bytes)
  let bytesOffset = WasmI32.add(ptr, 8n)
  let output = List.init(end - start, i => {
    let byte = WasmI32.load8U(bytesOffset, coerceNumberToWasmI32(start + i))
    WasmI32.toGrain(tagSimple(byte)): Number
  })
  (output, end)
}

/**
 * Used To Get A Byte From A Bytes Element
 * 
 * @param bytes: The Byte Element You Want To Operate On
 * @param offset: The Offset Of The Byte
 * 
 * @returns An Desired byte As A Number and the new offset
 */
@unsafe
export let getByte = (bytes: Bytes, offset: Number) => {
  let ptr = WasmI32.fromGrain(bytes)
  let bytesOffset = WasmI32.add(ptr, 8n)
  let byte = WasmI32.load8U(bytesOffset, coerceNumberToWasmI32(offset))
  (WasmI32.toGrain(tagSimple(byte)): Number, offset + 1)
}

/**
 * Used To Get A Unsigned LEB 128 From A Bytes Element
 * 
 * @param bytes: The Byte Element You Want To Operate On
 * @param offset: The Offset Of The Number
 * 
 * @returns An Desired byte As A Number and the new offset
 */
export let getUnsignedLEB128 = (bytes: Bytes, offset: Number) => {
  let mut result = 0
  let mut shift = 0
  let mut offset = offset
  while (true) {
    let (byte, newOffset) = getByte(bytes, offset)
    offset = newOffset
    result = result | (byte & 0x7f) << shift
    if ((0x80 & byte) == 0) break
    shift += 7
  }
  (result, offset)
}

/**
 * Used To Get A String From A Bytes Element
 * 
 * @param bytes: The Byte Element You Want To Operate On
 * @param offset: The Offset Of The Number
 * 
 * @returns The Desired String And The Offset
 */
export let getString = (bytes: Bytes, offset: Number) => {
  // Get String Length
  let mut (stringLength, offset) = getUnsignedLEB128(bytes, offset)
  // Get The String
  let str = Bytes.slice(offset, stringLength, bytes)
  let str = Bytes.toString(str)
  // Return The String And Offset
  (str, offset + stringLength)
}
