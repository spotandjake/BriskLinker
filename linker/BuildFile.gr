// Imports
import Buffer from "buffer"
import List from "list"
import Map from "map"
import Int32 from "int32"
import Bytes from "bytes"
import Stream from "./Stream"
import DecodeSection, { getTypeSection } from "./Decoder/DecodeSection"
import WasmDecoder from "./Decoder/WasmDecoder"
import Encoder from "./encode"
// Type Imports
import DecodeFile from "./Decoder/DecodeFile"
// Buffer Manipulation
let appendBufferByte = (buffer, byte) => {
  Buffer.addInt8(Int32.fromNumber(byte), buffer)
  buffer
}
let appendBufferByteList = (buffer, byteList) => {
  let mut buffer = buffer
  List.forEach(byte => {
    buffer = appendBufferByte(buffer, byte)
    void
  }, byteList)
  buffer
}
// Create The Sections
export let createTypeSection = (wasmBinary, dependencyChain) => {
  let mut typeCount = 0
  let typeSection = Buffer.make(0)
  // For Each Dependency
  List.forEach((dependency: DecodeFile.FileData) => {
    // Get The Type Section
    let typeStream = getTypeSection(dependency.wasmSections)
    // Skip This Dependency If There Is Not A Type Section
    if (!Stream.isEmpty(typeStream)) {
      // Decode The Number Of Types
      let numberOfTypes = Stream.nextUIntLEB128(typeStream)
      // Set The dependency's Type offset
      dependency.offsetData.typeOffset = typeCount
      // Increment The Number Of Types
      typeCount += numberOfTypes
      // Append The Type Section To The New Type Section
      Buffer.addBytes(
        Stream.nextSliceBytes(typeStream, Stream.remainingLength(typeStream)),
        typeSection
      )
    }
  }, dependencyChain)
  // Write The Section Header
  let wasmBinary = appendBufferByte(wasmBinary, 0x01) // Write Section ID
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(Buffer.length(typeSection) + 1)
  ) // Write Section Size
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(typeCount)
  ) // Write Type Count
  // Append The Type Section To The WasmBinary
  Buffer.addBuffer(typeSection, wasmBinary)
  // Return The Buffer
  wasmBinary
}
export let createImportSection = (wasmBinary, dependencyChain) => {
  let mut importCount = 0
  let importSection = Buffer.make(0)
  // For Each Dependency
  List.forEach((dependency: DecodeFile.FileData) => {
    // Get Type Offset
    let typeOffset = dependency.offsetData.typeOffset;
    // Map Each Import
    List.forEach((wasmImport: WasmDecoder.WasmImport) => {
      // TODO: Link Together Brisk Imports
      if (wasmImport.briskImport) {
        void
      } else {
        // Get Import Properties
        let importModule = wasmImport.importModule
        let importName = wasmImport.importName
        let importDesc = wasmImport.importDescription
        // TODO: Map The Actual Import
        let importDesc = match (importDesc) {
          // typeDescription, typeRef
          WasmDecoder.FunctionImport(typeRef) => WasmDecoder.FunctionImport(typeOffset + typeRef),
          _ => importDesc,
        }
        // Rebuild The Import
        appendBufferByteList(
          importSection,
          Encoder.encodeImport(importModule, importName, importDesc)
        )
        // Increment Import Count
        importCount += 1
      }
    }, dependency.wasmImports)
  }, dependencyChain)
  // Build The Header
  let wasmBinary = appendBufferByte(wasmBinary, 0x02) // Write Section ID
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(Buffer.length(importSection) + 1)
  ) // Write Section Size
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(importCount)
  ) // Write Import Count
  // Append The Import Section To The WasmBinary
  Buffer.addBuffer(importSection, wasmBinary)
  // Return The Buffer
  wasmBinary
}
export let createFuncSection = (wasmBinary, dependencyChain) => {
  void
}
export let createTableSection = (wasmBinary, dependencyChain) => {
  void
}
export let createMemorySection = (wasmBinary, dependencyChain) => {
  void
}
export let createGlobalSection = (wasmBinary, dependencyChain) => {
  void
}
export let createExportSection = (wasmBinary, dependencyChain) => {
  void
}
export let createStartSection = (wasmBinary, dependencyChain) => {
  void
}
export let createElementSection = (wasmBinary, dependencyChain) => {
  void
}
export let createCodeSection = (wasmBinary, dependencyChain) => {
  void
}
export let createDataSection = (wasmBinary, dependencyChain) => {
  // Create Data Section
  // Create Data Count Section
  void
}
// Build The File
export let buildFile = dependencyChain => {
  // Create The Buffer To Hold The File
  let wasmBinary = Buffer.make(0)
  // Add The Magic Wasm Headers
  let wasmBinary = appendBufferByteList(wasmBinary, [0x00, 0x61, 0x73, 0x6d])
  let wasmBinary = appendBufferByteList(wasmBinary, [0x01, 0x00, 0x00, 0x00])
  // TODO: Create The Custom Sections
  // TODO: Remap The Name Section
  // TODO: Build A New Linking Info Sections
  // TODO: Build Sections
  let wasmBinary = createTypeSection(wasmBinary, dependencyChain)
  let wasmBinary = createImportSection(wasmBinary, dependencyChain)
  // Return The File
  Buffer.toString(wasmBinary)
}
