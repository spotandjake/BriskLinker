// Imports
import Buffer from "buffer"
import List from "list"
import Map from "map"
import Int32 from "int32"
import Stream from "./Stream"
import DecodeSection, { getSectionStream } from "./Decoder/DecodeSection"
import { decodeCount } from "./DecodeHelpers"
import WasmDecoder from "./Decoder/WasmDecoder"
import Encoder from "./encode"
import { impossibleErr } from "./Errors"
// Type Imports
import DecodeFile from "./Decoder/DecodeFile"
// WasmBinary Type
record WasmBinary {
  // Naming Data
  mut moduleName: String,
  mut funcNames: List<(Number, String)>,
  mut globalNames: List<(Number, String)>,
  mut localNames: List<(Number, Number, List<(Number, String)>)>,
  // Properties
  mut hasMemoryImport: Bool,
  // Section Data
  mut customSections: List<Buffer.Buffer>, // customSection[]
  mut typeSection: List<(Number, Bytes)>, // (typeCount, typeContent)[]
  mut importSection: List<Buffer.Buffer>, // import[]
  mut funcSection: List<(Buffer.Buffer, Buffer.Buffer)
  >, // (functionType, functionBody)[]
  mut tableSection: List<Buffer.Buffer>, // table[]
  mut memorySection: List<Buffer.Buffer>, // memory[]
  mut globalSection: List<(Number, Bytes)>, // (globalCount, globalContent)[]
  mut exportSection: List<Buffer.Buffer>, // export[]
  mut startSection: Buffer.Buffer, // startFunction
  mut elementSection: List<Buffer.Buffer>, // element[]
  mut dataSection: List<Buffer.Buffer>, // dataSection[]
}
// Types
record WasmData {
  mut globalCount: Number,
  mut typeCount: Number,
  mut funcCount: Number,
}
// Buffer Manipulation
let appendBufferByte = (byte, buffer) =>
  Buffer.addInt8(Int32.fromNumber(byte), buffer)
let appendBufferByteList = (byteList, buffer) =>
  List.forEach(byte => appendBufferByte(byte, buffer), byteList)
let listToBuffer = byteList => {
  let buffer = Buffer.make(0)
  appendBufferByteList(byteList, buffer)
  buffer
}
// Create The Sections
export let createCustomSection = (wasmBinary, dependencyChain, wasmData) => {
  List.forEachi((dependency: DecodeFile.FileData, index) => {
    // Get The Custom Sections
    List.forEach(wasmSection => {
      match (wasmSection) {
        DecodeSection.CustomSection(sectionContent) => {
          Stream.resetPointer(sectionContent)
          let sectionID = Stream.nextString(sectionContent)
          if (sectionID == "name") {
            let mut moduleName = "module" ++ toString(index)
            while (Stream.remainingLength(sectionContent) > 0) {
              match (Stream.nextByte(sectionContent)) {
                // Module Name Section
                0x00 => {
                  Stream.nextUIntLEB128(sectionContent) // get subSection Size
                  let _moduleName = Stream.nextString(sectionContent)
                  if (dependency.isEntry) wasmBinary.moduleName = _moduleName
                  moduleName = _moduleName ++ toString(index)
                },
                // Function name Section
                0x01 => {
                  Stream.nextUIntLEB128(sectionContent) // get subSection Size
                  let funcCount = Stream.nextUIntLEB128(sectionContent)
                  for (let mut i = 0; i < funcCount; i += 1) {
                    let funcIndex = Stream.nextUIntLEB128(sectionContent)
                    let funcName = Stream.nextString(sectionContent)
                    // Map Function Index
                    let funcIndex = match (Map.get(
                      funcIndex,
                      dependency.offsetData.funcMap
                    )) {
                      Some(funcIndex) => funcIndex,
                      None => fail impossibleErr,
                    }
                    // Push To The New Name Section Info
                    wasmBinary.funcNames = [
                      (funcIndex, moduleName ++ "." ++ funcName),
                      ...wasmBinary.funcNames
                    ]
                  }
                  void
                },
                0x02 => {
                  Stream.nextUIntLEB128(sectionContent) // get subSection Size
                  let funcCount = Stream.nextUIntLEB128(sectionContent)
                  let mut localNames = []
                  for (let mut i = 0; i < funcCount; i += 1) {
                    let funcIndex = Stream.nextUIntLEB128(sectionContent)
                    let funcIndex = match (Map.get(
                      funcIndex,
                      dependency.offsetData.funcMap
                    )) {
                      Some(funcIndex) => funcIndex,
                      None => fail impossibleErr,
                    }
                    let localCount = Stream.nextUIntLEB128(sectionContent)
                    let mut funcLocalNames = []
                    for (let mut j = 0; j < localCount; j += 1) {
                      let localIndex = Stream.nextUIntLEB128(sectionContent)
                      let localName = Stream.nextString(sectionContent)
                      funcLocalNames = [
                        (localIndex, localName),
                        ...funcLocalNames
                      ]
                    }
                    localNames = [
                      (funcIndex, localCount, funcLocalNames),
                      ...localNames
                    ]
                  }
                  wasmBinary.localNames = List.append(
                    localNames,
                    wasmBinary.localNames
                  )
                },
                // Global name Section
                0x07 => {
                  Stream.nextUIntLEB128(sectionContent) // get subSection Size
                  let globalCount = Stream.nextUIntLEB128(sectionContent)
                  for (let mut i = 0; i < globalCount; i += 1) {
                    let globalIndex = Stream.nextUIntLEB128(sectionContent)
                    let globalName = Stream.nextString(sectionContent)
                    // Map Function Index
                    match (Map.get(
                      globalIndex,
                      dependency.offsetData.globalMap
                    )) {
                      Some(globalIndex) => {
                        // Push To The New Name Section Info
                        wasmBinary.globalNames = [
                          (globalIndex, moduleName ++ "." ++ globalName),
                          ...wasmBinary.globalNames
                        ]
                      },
                      None => void,
                    }
                  }
                  void
                },
                _ => break,
              }
            }
          } else if (sectionID == "LinkingInfo") {
            if (dependency.isEntry) {
              // TODO: Rebuild The Linking Info Section
              void
            }
          } else if (sectionID == "BriskModuleSignature") {
            if (dependency.isEntry) {
              let buf = Buffer.make(0)
              Buffer.addBytes(sectionContent.data, buf)
              wasmBinary.customSections = [buf, ...wasmBinary.customSections]
              void
            }
          } else {
            let buf = Buffer.make(0)
            Buffer.addBytes(sectionContent.data, buf)
            wasmBinary.customSections = [buf, ...wasmBinary.customSections]
          }
        },
        _ => void,
      }
    }, dependency.wasmSections)
  }, dependencyChain)
}
export let createTypeSection = (wasmBinary, dependencyChain, wasmData) => {
  List.forEach((dependency: DecodeFile.FileData) => {
    // TODO: Consider Merging Duplicate Types
    // Get The Type Section
    let typeStream = getSectionStream(0x01, dependency.wasmSections)
    // Split The Types
    let depTypeCount = Stream.nextUIntLEB128(typeStream)
    wasmBinary.typeSection = List.append(
      [(depTypeCount, Stream.remainingBytes(typeStream))],
      wasmBinary.typeSection
    )
    // Map The Types
    for (let mut i = 0; i < depTypeCount; i += 1) {
      // Write The Offset
      Map.set(i, wasmData.typeCount, dependency.offsetData.typeMap)
      wasmData.typeCount += 1
    }
  }, dependencyChain)
}
export let createImportSection = (wasmBinary, dependencyChain, wasmData) => {
  List.forEach((dependency: DecodeFile.FileData) => {
    // Create local Counts
    let mut localFunctionCount = 0
    let mut localGlobalCount = 0
    // For Each Import
    List.forEach((wasmImport: WasmDecoder.WasmImport) => {
      // Map The Actual Import
      if (!wasmImport.briskImport) {
        if (wasmImport.importKind == WasmDecoder.MemoryKind)
          wasmBinary.hasMemoryImport = true
        let importDesc = match (wasmImport.importDescription) {
          WasmDecoder.FunctionImport(typeRef) => {
            Map.set(
              localFunctionCount,
              wasmData.funcCount,
              dependency.offsetData.funcMap
            )
            localFunctionCount += 1
            wasmData.funcCount += 1
            dependency.offsetData.importFunctionCount += 1
            match (Map.get(typeRef, dependency.offsetData.typeMap)) {
              Some(typeOffset) => WasmDecoder.FunctionImport(typeOffset),
              None => fail impossibleErr,
            }
          },
          WasmDecoder.GlobalImport(_, _) => {
            Map.set(
              localGlobalCount,
              wasmData.globalCount,
              dependency.offsetData.globalMap
            )
            localGlobalCount += 1
            wasmData.globalCount += 1
            dependency.offsetData.importGlobalCount += 1
            wasmImport.importDescription
          },
          _ => wasmImport.importDescription,
        }
        // Rebuild The Import
        wasmBinary.importSection = [
          listToBuffer(
            Encoder.encodeImport(
              wasmImport.importModule,
              wasmImport.importName,
              importDesc
            )
          ),
          ...wasmBinary.importSection
        ]
      } else {
        match (wasmImport.importKind) {
          WasmDecoder.FuncKind => {
            wasmImport.localIndex = Some(localFunctionCount)
            localFunctionCount += 1
            dependency.offsetData.importFunctionCount += 1
          },
          WasmDecoder.GlobalKind => {
            wasmImport.localIndex = Some(localGlobalCount)
            localGlobalCount += 1
            dependency.offsetData.importGlobalCount += 1
          },
          _ =>
            fail "Only Global And Function Brisk Imports Are Currently Supported",
        }
      }
    }, List.reverse(dependency.wasmImports))
  }, List.reverse(dependencyChain))
}
export let createFuncSection = (wasmBinary, dependencyChain, wasmData) => {
  List.forEach((dependency: DecodeFile.FileData) => {
    // Get The Function Section
    let funcStream = getSectionStream(0x03, dependency.wasmSections)
    let codeStream = getSectionStream(0x0a, dependency.wasmSections)
    // Get The Function Count
    let funcCount = Stream.nextUIntLEB128(funcStream)
    Stream.advance(codeStream, 1)
    // For Each Function
    let functions = List.init(funcCount, funcIndex => {
      // Map The Function header
      let funcSection = match (Map.get(
        Stream.nextUIntLEB128(funcStream),
        dependency.offsetData.typeMap
      )) {
        Some(typeOffset) => listToBuffer(Encoder.encodeUIntLeb128(typeOffset)),
        None => fail impossibleErr,
      }
      // Map The Function Index
      Map.set(
        funcIndex + dependency.offsetData.importFunctionCount,
        wasmData.funcCount,
        dependency.offsetData.funcMap
      )
      wasmData.funcCount += 1
      // Get The Function Body
      let funcBodySize = Stream.nextUIntLEB128(codeStream)
      let funcBodyContent = Stream.nextStreamSlice(codeStream, funcBodySize)
      let funcBody = Buffer.make(0)
      // Map The Function Body
      match (List.nth(funcIndex, dependency.codeReferences)) {
        Some(codeRefs) => {
          List.forEach(codeRef => {
            // Get The Reference Data
            let (refPosition, refMap) = match (codeRef) {
              DecodeSection.FuncRef(pos) =>
                (pos, dependency.offsetData.funcMap),
              DecodeSection.TypeRef(pos) =>
                (pos, dependency.offsetData.typeMap),
              DecodeSection.GlobalRef(pos) =>
                (pos, dependency.offsetData.globalMap),
            }
            // Write The Stuff Before The Reference
            Buffer.addBytes(
              Stream.nextSliceBytes(
                funcBodyContent,
                refPosition - funcBodyContent.position
              ),
              funcBody
            )
            // Write The Reference
            let refValue = Stream.nextUIntLEB128(funcBodyContent)
            let refValue = match (Map.get(refValue, refMap)) {
              Some(value) => value,
              None => fail impossibleErr ++ toString(refValue),
            }
            appendBufferByteList(Encoder.encodeUIntLeb128(refValue), funcBody)
          }, codeRefs)
        },
        None => fail "Function Does Not Have Linking Info",
      }
      // Write The Remaining Stuff
      Buffer.addBytes(Stream.remainingBytes(funcBodyContent), funcBody)
      let codeBody = listToBuffer(Encoder.encodeUIntLeb128(funcBodySize))
      Buffer.addBuffer(funcBody, codeBody)
      // Return The Function Content
      (funcSection, codeBody)
    })
    // Write The Function Data To The Binary
    wasmBinary.funcSection = List.append(wasmBinary.funcSection, functions)
  }, dependencyChain)
}
export let createTableSection = (wasmBinary, dependencyChain, wasmData) => {
  // TODO: Once wasm supports multiple tables allocate a table per dependency
  let mut initialTableSize = 0
  List.forEach((dependency: DecodeFile.FileData) => {
    let tableSection = getSectionStream(0x04, dependency.wasmSections)
    // Skip the tableCount, tableType, flagType until wasm has multiple tables
    Stream.advance(tableSection, 3)
    initialTableSize += Stream.nextByte(tableSection)
  }, dependencyChain)
  // Write The Table Section
  // tableType, flagType, initialCount
  let table = listToBuffer(
    [0x70, 0x00, ...Encoder.encodeUIntLeb128(initialTableSize)]
  )
  wasmBinary.tableSection = [table, ...wasmBinary.tableSection]
}
export let createMemorySection = (wasmBinary, dependencyChain, wasmData) => {
  // TODO: Once wasm supports multiple memories consider using a separate memory per dependency
  if (!wasmBinary.hasMemoryImport) {
    let mut initialMemorySize = 0
    List.forEach((dependency: DecodeFile.FileData) => {
      let memorySection = getSectionStream(0x05, dependency.wasmSections)
      // Skip the tableCount, flagType until wasm has multiple memories
      Stream.advance(memorySection, 2)
      initialMemorySize += Stream.nextByte(memorySection)
    }, dependencyChain)
    // Write The Table Section
    wasmBinary.memorySection = [
      listToBuffer([0x00, ...Encoder.encodeUIntLeb128(initialMemorySize)]),
      ...wasmBinary.memorySection
    ]
  }
}
export let createGlobalSection = (wasmBinary, dependencyChain, wasmData) => {
  // Map Deps
  List.forEach((dependency: DecodeFile.FileData) => {
    // Get The Type Section
    let globalStream = getSectionStream(0x06, dependency.wasmSections)
    // Split The Types
    let depGlobalCount = Stream.nextUIntLEB128(globalStream)
    wasmBinary.globalSection = [
      (depGlobalCount, Stream.remainingBytes(globalStream)),
      ...wasmBinary.globalSection
    ]
    // Map The Types
    for (let mut i = 0; i < depGlobalCount; i += 1) {
      // Write The Offset
      Map.set(
        i + dependency.offsetData.importGlobalCount,
        wasmData.globalCount,
        dependency.offsetData.globalMap
      )
      wasmData.globalCount += 1
    }
    let mut importedGlobalCount = 0
    let mut importedGlobals = Buffer.make(0)
    // Map The Imported Globals
    List.forEach((wasmImport: WasmDecoder.WasmImport) => {
      // Only Map briskImports That Are Globals
      if (
        wasmImport.briskImport &&
        wasmImport.importKind == WasmDecoder.GlobalKind
      ) {
        match (wasmImport.importDescription) {
          WasmDecoder.GlobalImport(_, wasmType) => {
            // Write the global type
            appendBufferByteList(
              Encoder.encodeWasmType(wasmType),
              importedGlobals
            ) // globalType
            appendBufferByte(0x01, importedGlobals) // mutable
            let constExpr = match (wasmType) {
              WasmDecoder.WasmI32 => 0x41,
              WasmDecoder.WasmI64 => 0x42,
              WasmDecoder.WasmF32 => 0x43,
              WasmDecoder.WasmF64 => 0x44,
              WasmDecoder.WasmFuncType(_, _) => fail impossibleErr,
            }
            appendBufferByteList(
              [constExpr, 0x00, 0x0b],
              importedGlobals
            ) // initial value of 1,
            // Create Global
            importedGlobalCount += 1
            // Get Local Index
            let localIndex = match (wasmImport.localIndex) {
              Some(index) => index,
              None => fail impossibleErr,
            }
            // Map Global
            Map.set(
              localIndex,
              wasmData.globalCount,
              dependency.offsetData.globalMap
            )
            wasmData.globalCount += 1
          },
          _ => fail impossibleErr,
        }
      }
    }, dependency.wasmImports)
    // Write The Imported Globals
    wasmBinary.globalSection = [
      (importedGlobalCount, Buffer.toBytes(importedGlobals)),
      ...wasmBinary.globalSection
    ]
  }, dependencyChain)
}
export let createExportSection = (wasmBinary, dependencyChain, wasmData) => {
  List.forEach((dependency: DecodeFile.FileData) => {
    List.forEach((wasmExport: WasmDecoder.WasmExport) => {
      if (!wasmExport.briskExport && dependency.isEntry) {
        // Assemble Export
        let exportStream = Buffer.make(0)
        appendBufferByteList(
          Encoder.encodeString(wasmExport.exportName),
          exportStream
        )
        let (exportKind, exportValue) = match (wasmExport.exportKind) {
          WasmDecoder.FuncKind =>
            (
              0x00,
              Map.get(wasmExport.exportIndex, dependency.offsetData.funcMap),
            ),
          WasmDecoder.TableKind => (0x01, Some(wasmExport.exportIndex)),
          WasmDecoder.MemoryKind => (0x02, Some(wasmExport.exportIndex)),
          WasmDecoder.GlobalKind =>
            (
              0x03,
              Map.get(wasmExport.exportIndex, dependency.offsetData.globalMap),
            ),
        }
        let exportValue = match (exportValue) {
          Some(value) => value,
          None => fail impossibleErr,
        }
        appendBufferByte(exportKind, exportStream)
        appendBufferByteList(
          Encoder.encodeUIntLeb128(exportValue),
          exportStream
        )
        wasmBinary.exportSection = [exportStream, ...wasmBinary.exportSection]
      }
    }, dependency.wasmExports)
  }, dependencyChain)
}
export let createStartSection = (wasmBinary, dependencyChain, wasmData) => {
  // Create The Dependency Map
  let dependencyMap = Map.fromList(
    List.map((dep: DecodeFile.FileData) =>
      (dep.modulePath, dep), dependencyChain)
  )
  // Map The Start Function
  let startFunc = Buffer.make(0)
  List.forEach((dependency: DecodeFile.FileData) => {
    // Get The Start Section
    let startStream = getSectionStream(0x08, dependency.wasmSections)
    // If There is no start section, skip
    if (Stream.length(startStream) != 0) {
      // Parse The Start Section
      let startIndex = Stream.nextUIntLEB128(startStream)
      // Map The Start Function
      let startIndex = match (Map.get(
        startIndex,
        dependency.offsetData.funcMap
      )) {
        Some(funcIndex) => funcIndex,
        None => fail impossibleErr ++ toString(startIndex),
      }
      // Append The Import Globals Mapping
      List.forEach((wasmImport: WasmDecoder.WasmImport) => {
        if (
          wasmImport.briskImport &&
          wasmImport.importKind == WasmDecoder.GlobalKind
        ) {
          // Get The Dependency
          let moduleName = match (Map.get(
            wasmImport.importModule,
            dependency.dependencies
          )) {
            Some(moduleName) => moduleName,
            None => fail impossibleErr,
          }
          match (Map.get(moduleName, dependencyMap)) {
            Some(targetDependency) => {
              // Get The Export
              let targetExport = List.find((exp: WasmDecoder.WasmExport) => {
                exp.briskExport && wasmImport.importName == exp.exportName
              }, targetDependency.wasmExports)
              match (targetExport) {
                Some(exportInfo) => {
                  let exportIndex = Map.get(
                    exportInfo.exportIndex,
                    targetDependency.offsetData.globalMap
                  )
                  match (Map.get(
                    exportInfo.exportIndex,
                    targetDependency.offsetData.globalMap
                  )) {
                    Some(exportIndex) => {
                      // Write Global.Set
                      appendBufferByteList(
                        [0x23, ...Encoder.encodeUIntLeb128(exportIndex)],
                        startFunc
                      ) // Write the global.get
                      let importIndex = match (Map.get(
                        match (wasmImport.localIndex) {
                          Some(index) => index,
                          None => fail impossibleErr,
                        },
                        dependency.offsetData.globalMap
                      )) {
                        Some(index) => index,
                        None => fail impossibleErr,
                      }
                      appendBufferByteList(
                        [0x24, ...Encoder.encodeUIntLeb128(importIndex)],
                        startFunc
                      ) // Write the global.set
                    },
                    None => fail impossibleErr,
                  }
                },
                None => fail impossibleErr,
              }
            },
            None => fail impossibleErr,
          }
        }
      }, dependency.wasmImports)
      // Append A Function Call To The New Start Function Body
      appendBufferByteList(
        [0x10, ...Encoder.encodeUIntLeb128(startIndex)],
        startFunc
      )
    }
  }, dependencyChain)
  // Build The Start Function Type
  let startFunctionType = listToBuffer([0x60, 0x00, 0x00])
  wasmBinary.typeSection = [
    (1, Buffer.toBytes(startFunctionType)),
    ...wasmBinary.typeSection
  ]
  // Build The New Start Function
  let startFunctionHeader = listToBuffer(
    Encoder.encodeUIntLeb128(wasmData.typeCount)
  )
  let startFunctionBody = Buffer.make(0)
  appendBufferByte(0x00, startFunctionBody) // Local Count is 0
  Buffer.addBuffer(startFunc, startFunctionBody)
  appendBufferByte(0x0b, startFunctionBody) // Push end instruction
  let funcBody = listToBuffer(
    Encoder.encodeUIntLeb128(Buffer.length(startFunctionBody))
  )
  Buffer.addBuffer(startFunctionBody, funcBody)
  // Push The Start Function
  wasmBinary.funcSection = List.append(
    wasmBinary.funcSection,
    [(startFunctionHeader, funcBody)]
  )
  // Push the Encoded Start Function Index
  wasmBinary.funcNames = [
    (wasmData.funcCount, "_start"),
    ...wasmBinary.funcNames
  ]
  wasmBinary.localNames = [
    (wasmData.funcCount, 0, []),
    ...wasmBinary.localNames
  ]
  // TODO: Support WASI Start Section
  // wasmBinary.startSection = listToBuffer(
  //   Encoder.encodeUIntLeb128(wasmData.funcCount)
  // )
  // Push The Start Export to be Wasi Compatible
  let startExport = Buffer.make(0)
  // Export Name
  appendBufferByteList(Encoder.encodeString("_start"), startExport)
  // Export Type
  appendBufferByteList(
    [
      0x00, // Function Export Kind
      ...Encoder.encodeUIntLeb128(wasmData.funcCount)
    ],
    startExport
  )
  // Export Start
  wasmBinary.exportSection = [startExport, ...wasmBinary.exportSection]
}
export let createElementSection = (wasmBinary, dependencyChain, wasmData) => {
  let mut elementOffset = 0
  List.forEach((dependency: DecodeFile.FileData) => {
    // Get The Element Section
    let elementStream = getSectionStream(0x09, dependency.wasmSections)
    // Parse The Section
    decodeCount(elementStream, (_, _) => {
      let elemData = Buffer.make(0)
      // Parse The Limits
      let elemType = Stream.nextByte(elementStream)
      match (elemType) {
        // Func Ref
        0 => {
          // Replace The Element Offset
          Stream.advance(elementStream, 1)
          Stream.nextUIntLEB128(elementStream)
          Stream.advance(elementStream, 1)
          // Get There Number Of values
          let refCount = Stream.nextUIntLEB128(elementStream)
          // Write The Output
          // TODO: Handle Overlapping Elements
          appendBufferByteList(
            [0x00, 0x41, ...Encoder.encodeUIntLeb128(elementOffset)],
            elemData
          )
          appendBufferByteList(
            [0x0b, ...Encoder.encodeUIntLeb128(refCount)],
            elemData
          )
          // Map The Values
          for (let mut ref = 0; ref < refCount; ref += 1) {
            match (Map.get(
              Stream.nextUIntLEB128(elementStream),
              dependency.offsetData.funcMap
            )) {
              Some(funcIndex) =>
                appendBufferByteList(
                  Encoder.encodeUIntLeb128(funcIndex),
                  elemData
                ),
              None => fail impossibleErr,
            }
          }
          wasmBinary.elementSection = [elemData, ...wasmBinary.elementSection]
          elementOffset += 1
        },
        _ => fail "Unknown Element Type",
      }
    })
  }, dependencyChain)
}
export let createDataSection = (wasmBinary, dependencyChain, wasmData) => {
  // TODO: Create Data Section
  // TODO: Create Data Count Section
  // Return The Buffer
  wasmBinary
}
// Rebuild WasmBinary
export let buildBinary = wasmBinaryContent => {
  // Helpers
  let encodeSection = (sectionID, sectionContent) => {
    let sectionBuffer = listToBuffer(
      [sectionID, ...Encoder.encodeUIntLeb128(Buffer.length(sectionContent))]
    )
    Buffer.addBuffer(sectionContent, sectionBuffer)
    sectionBuffer
  }
  let encodeSectionWithCount = (sectionID, count, sectionContent) => {
    let wasmSection = listToBuffer(Encoder.encodeUIntLeb128(count))
    Buffer.addBuffer(sectionContent, wasmSection)
    encodeSection(sectionID, wasmSection)
  }
  // Build The Sections
  // Build The Name Section
  let nameSection = Buffer.make(0)
  appendBufferByteList(Encoder.encodeString("name"), nameSection)
  let moduleNameSubSection = Buffer.make(0)
  appendBufferByteList(
    Encoder.encodeString(wasmBinaryContent.moduleName),
    moduleNameSubSection
  )
  let funcNameSubSection = Buffer.make(0)
  appendBufferByteList(
    Encoder.encodeUIntLeb128(List.length(wasmBinaryContent.funcNames)),
    funcNameSubSection
  )
  List.forEach(((funcIndex, funcName)) => {
    appendBufferByteList(
      Encoder.encodeUIntLeb128(funcIndex),
      funcNameSubSection
    )
    appendBufferByteList(Encoder.encodeString(funcName), funcNameSubSection)
  }, List.sort(((a, _), (b, _)) => a - b, wasmBinaryContent.funcNames))
  let localNameSubSection = Buffer.make(0)
  appendBufferByteList(
    Encoder.encodeUIntLeb128(List.length(wasmBinaryContent.localNames)),
    localNameSubSection
  )
  List.forEach(((funcIndex, localCount, locals)) => {
    appendBufferByteList(
      Encoder.encodeUIntLeb128(funcIndex),
      localNameSubSection
    )
    appendBufferByteList(
      Encoder.encodeUIntLeb128(localCount),
      localNameSubSection
    )
    List.forEach(((localIndex, localName)) => {
      appendBufferByteList(
        Encoder.encodeUIntLeb128(localIndex),
        localNameSubSection
      )
      appendBufferByteList(Encoder.encodeString(localName), localNameSubSection)
    }, List.sort(((a, _), (b, _)) => a - b, locals))
  }, List.sort(((a, _, _), (b, _, _)) => a - b, wasmBinaryContent.localNames))
  let globalNameSubSection = Buffer.make(0)
  appendBufferByteList(
    Encoder.encodeUIntLeb128(List.length(wasmBinaryContent.globalNames)),
    globalNameSubSection
  )
  List.forEach(((globalIndex, globalName)) => {
    appendBufferByteList(
      Encoder.encodeUIntLeb128(globalIndex),
      globalNameSubSection
    )
    appendBufferByteList(Encoder.encodeString(globalName), globalNameSubSection)
  }, List.sort(((a, _), (b, _)) => a - b, wasmBinaryContent.globalNames))
  // Local Names SubSection
  Buffer.addBuffer(encodeSection(0x00, moduleNameSubSection), nameSection)
  Buffer.addBuffer(encodeSection(0x01, funcNameSubSection), nameSection)
  Buffer.addBuffer(encodeSection(0x02, localNameSubSection), nameSection)
  Buffer.addBuffer(encodeSection(0x07, globalNameSubSection), nameSection)
  let nameSection = encodeSection(0x00, nameSection)
  // Build The Custom Sections
  let customSection = Buffer.make(0)
  List.forEach(customStream => {
    Buffer.addBuffer(encodeSection(0x00, customStream), customSection)
  }, wasmBinaryContent.customSections)
  // Build The Type Section
  let mut typeCount = 0
  let typeSection = Buffer.make(0)
  List.forEach(((depTypeCount, depTypeSection)) => {
    Buffer.addBytes(depTypeSection, typeSection)
    typeCount += depTypeCount
  }, List.reverse(wasmBinaryContent.typeSection))
  let typeSection = encodeSectionWithCount(0x01, typeCount, typeSection)
  // Build The ImportSection
  let importSection = Buffer.make(0)
  List.forEach(depImport => {
    Buffer.addBuffer(depImport, importSection)
  }, wasmBinaryContent.importSection)
  let importSection = encodeSectionWithCount(
    0x02,
    List.length(wasmBinaryContent.importSection),
    importSection
  )
  // Build The Function Sections
  let funcSection = Buffer.make(0)
  let codeSection = Buffer.make(0)
  let funcCount = List.length(wasmBinaryContent.funcSection)
  List.forEach(((funcHeader, funcBody)) => {
    Buffer.addBuffer(funcHeader, funcSection)
    Buffer.addBuffer(funcBody, codeSection)
  }, wasmBinaryContent.funcSection)
  let funcSection = encodeSectionWithCount(0x03, funcCount, funcSection)
  let codeSection = encodeSectionWithCount(0x0a, funcCount, codeSection)
  // Build The Table Section
  let tableSection = Buffer.make(0)
  List.forEach(depImport => {
    Buffer.addBuffer(depImport, tableSection)
  }, wasmBinaryContent.tableSection)
  let tableSection = encodeSectionWithCount(
    0x04,
    List.length(wasmBinaryContent.tableSection),
    tableSection
  )
  // Build The Memory Section
  let memorySection = Buffer.make(0)
  List.forEach(depImport =>
    Buffer.addBuffer(depImport, memorySection), wasmBinaryContent.memorySection)
  let memorySection = encodeSectionWithCount(
    0x05,
    List.length(wasmBinaryContent.memorySection),
    memorySection
  )
  // Build The Global Section
  let mut globalCount = 0
  let globalSection = Buffer.make(0)
  List.forEach(((depGlobalCount, depGlobalSection)) => {
    Buffer.addBytes(depGlobalSection, globalSection)
    globalCount += depGlobalCount
  }, List.reverse(wasmBinaryContent.globalSection))
  let globalSection = encodeSectionWithCount(0x06, globalCount, globalSection)
  // Build The Export Section
  let exportSection = Buffer.make(0)
  List.forEach(exp => Buffer.addBuffer(exp, exportSection), List.reverse(
    wasmBinaryContent.exportSection
  ))
  let exportSection = encodeSectionWithCount(
    0x07,
    List.length(wasmBinaryContent.exportSection),
    exportSection
  )
  // Build The Start Section
  let startSection = encodeSection(0x08, wasmBinaryContent.startSection)
  // Build The Element Section
  let elementSection = Buffer.make(0)
  List.forEach(elem => Buffer.addBuffer(elem, elementSection), List.reverse(
    wasmBinaryContent.elementSection
  ))
  let elementSection = encodeSectionWithCount(
    0x09,
    List.length(wasmBinaryContent.elementSection),
    elementSection
  )
  // TODO: Build The Data Section
  // TODO: Build The Data Count Section
  // Create The Binary
  let wasmBinary = Buffer.make(0)
  appendBufferByteList([0x00, 0x61, 0x73, 0x6d], wasmBinary)
  appendBufferByteList([0x01, 0x00, 0x00, 0x00], wasmBinary)
  // Combine The Sections Into A Binary
  Buffer.addBuffer(customSection, wasmBinary)
  Buffer.addBuffer(typeSection, wasmBinary)
  Buffer.addBuffer(importSection, wasmBinary)
  Buffer.addBuffer(funcSection, wasmBinary)
  Buffer.addBuffer(tableSection, wasmBinary)
  Buffer.addBuffer(memorySection, wasmBinary)
  Buffer.addBuffer(globalSection, wasmBinary)
  Buffer.addBuffer(exportSection, wasmBinary)
  if (Buffer.length(wasmBinaryContent.startSection) != 0) {
    Buffer.addBuffer(startSection, wasmBinary)
  }
  Buffer.addBuffer(elementSection, wasmBinary)
  Buffer.addBuffer(codeSection, wasmBinary)
  // let wasmBinary = createDataSection(wasmBinary, dependencyChain, wasmData)
  Buffer.addBuffer(nameSection, wasmBinary)
  // Return The Binary
  wasmBinary
}
// Build The File
export let buildFile = dependencyChain => {
  // Create Wasm Data
  let wasmData = { globalCount: 0, typeCount: 0, funcCount: 0 }
  // Create The Wasm Binary Content
  let wasmBinaryContent = {
    // Name Section Info
    moduleName: "",
    funcNames: [],
    globalNames: [],
    localNames: [],
    // Properties
    hasMemoryImport: false,
    // Section Data
    customSections: [],
    typeSection: [],
    importSection: [],
    funcSection: [],
    tableSection: [],
    memorySection: [],
    globalSection: [],
    exportSection: [],
    startSection: Buffer.make(0),
    elementSection: [],
    dataSection: [],
  }
  // Build Sections
  createTypeSection(wasmBinaryContent, dependencyChain, wasmData)
  createImportSection(wasmBinaryContent, dependencyChain, wasmData)
  createGlobalSection(wasmBinaryContent, dependencyChain, wasmData)
  createFuncSection(wasmBinaryContent, dependencyChain, wasmData)
  createTableSection(wasmBinaryContent, dependencyChain, wasmData)
  createMemorySection(wasmBinaryContent, dependencyChain, wasmData)
  createExportSection(wasmBinaryContent, dependencyChain, wasmData)
  createStartSection(wasmBinaryContent, dependencyChain, wasmData)
  createElementSection(wasmBinaryContent, dependencyChain, wasmData)
  // let wasmBinary = createDataSection(wasmBinary, dependencyChain, wasmData)
  createCustomSection(wasmBinaryContent, dependencyChain, wasmData)
  // Build The Binary
  let wasmBinary = buildBinary(wasmBinaryContent)
  // Return The File
  Buffer.toString(wasmBinary)
}
