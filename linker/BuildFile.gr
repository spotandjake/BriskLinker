// Imports
import Buffer from "buffer"
import List from "list"
import Map from "map"
import Int32 from "int32"
import Bytes from "bytes"
import Stream from "./Stream"
import DecodeSection, {
  getTypeSection,
  getFuncSection,
  getCodeSection,
} from "./Decoder/DecodeSection"
import WasmDecoder from "./Decoder/WasmDecoder"
import Encoder from "./encode"
// Type Imports
import DecodeFile from "./Decoder/DecodeFile"
// Buffer Manipulation
let appendBufferByte = (buffer, byte) => {
  Buffer.addInt8(Int32.fromNumber(byte), buffer)
  buffer
}
let appendBufferByteList = (buffer, byteList) => {
  let mut buffer = buffer
  List.forEach(byte => {
    buffer = appendBufferByte(buffer, byte)
    void
  }, byteList)
  buffer
}
// Create The Sections
export let createTypeSection = (wasmBinary, dependencyChain) => {
  let mut typeCount = 0
  let typeSection = Buffer.make(0)
  // For Each Dependency
  List.forEach((dependency: DecodeFile.FileData) => {
    // Get The Type Section
    let typeStream = getTypeSection(dependency.wasmSections)
    // Skip This Dependency If There Is Not A Type Section
    if (!Stream.isEmpty(typeStream)) {
      // Decode The Number Of Types
      let numberOfTypes = Stream.nextUIntLEB128(typeStream)
      // Set The dependency's Type offset
      dependency.offsetData.typeOffset = typeCount
      // Increment The Number Of Types
      typeCount += numberOfTypes
      // Append The Type Section To The New Type Section
      Buffer.addBytes(
        Stream.nextSliceBytes(typeStream, Stream.remainingLength(typeStream)),
        typeSection
      )
    }
  }, dependencyChain)
  // Write The Section Header
  let wasmBinary = appendBufferByte(wasmBinary, 0x01) // Write Section ID
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(Buffer.length(typeSection) + 1)
  ) // Write Section Size
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(typeCount)
  ) // Write Type Count
  // Append The Type Section To The WasmBinary
  if (Buffer.length(typeSection) != 0) Buffer.addBuffer(typeSection, wasmBinary)
  // Return The Buffer
  wasmBinary
}
export let createImportSection = (wasmBinary, dependencyChain) => {
  let mut importCount = 0
  let importSection = Buffer.make(0)
  let mut importFunctionOffset = 0
  let mut importGlobalOffset = 0
  // For Each Dependency
  List.forEach((dependency: DecodeFile.FileData) => {
    // Set Offsets
    dependency.offsetData.importFunctionOffset = importFunctionOffset
    dependency.offsetData.importGlobalOffset = importGlobalOffset
    // Get Type Offset
    let typeOffset = dependency.offsetData.typeOffset
    // Map Each Import
    List.forEach((wasmImport: WasmDecoder.WasmImport) => {
      // TODO: Link Together Brisk Imports
      if (wasmImport.briskImport) {
        void
      } else {
        // Get Import Properties
        let importModule = wasmImport.importModule
        let importName = wasmImport.importName
        let importDesc = wasmImport.importDescription
        // Map The Actual Import
        // TODO: We can only have one table import and one memory import so take the ones from the entryFile
        let importDesc = match (importDesc) {
          // typeDescription, typeRef
          WasmDecoder.FunctionImport(typeRef) => {
            dependency.offsetData.importFunctionCount += 1
            importFunctionOffset += 1
            WasmDecoder.FunctionImport(typeOffset + typeRef)
          },
          WasmDecoder.GlobalImport(_, _) => {
            dependency.offsetData.importGlobalCount += 1
            importGlobalOffset += 1
            importDesc
          },
          _ => importDesc,
        }
        // Rebuild The Import
        appendBufferByteList(
          importSection,
          Encoder.encodeImport(importModule, importName, importDesc)
        )
        // Increment Import Count
        importCount += 1
      }
    }, dependency.wasmImports)
  }, dependencyChain)
  // Build The Header
  let wasmBinary = appendBufferByte(wasmBinary, 0x02) // Write Section ID
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(Buffer.length(importSection) + 1)
  ) // Write Section Size
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(importCount)
  ) // Write Import Count
  // Append The Import Section To The WasmBinary
  if (Buffer.length(importSection) != 0)
    Buffer.addBuffer(importSection, wasmBinary)
  // Return The Buffer
  wasmBinary
}
export let createFuncSection = (wasmBinary, dependencyChain) => {
  let mut funcCount = 0
  let mut funcSection = Buffer.make(0)
  // For Each Dependency
  List.forEach((dependency: DecodeFile.FileData) => {
    // Get The Function Section
    let funcStream = getFuncSection(dependency.wasmSections)
    let functionCount = Stream.nextUIntLEB128(funcStream)
    // Map The Function Section
    for (let mut i = 0; i < functionCount; i += 1) {
      // Get The TypeRef
      let typeRef = Stream.nextUIntLEB128(funcStream)
      // Add The Offset
      funcSection = appendBufferByteList(
        funcSection,
        Encoder.encodeUIntLeb128(typeRef + dependency.offsetData.typeOffset)
      )
      funcCount += 1
    }
  }, dependencyChain)
  // TODO: Add An Additional Function For The New Entry Function
  // Write The Section Header
  let wasmBinary = appendBufferByte(wasmBinary, 0x03) // Write Section ID
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(Buffer.length(funcSection) + 1)
  ) // Write Section Size
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(funcCount)
  ) // Write Func Count
  // Append The Function Section To The WasmBinary
  if (Buffer.length(funcSection) != 0) Buffer.addBuffer(funcSection, wasmBinary)
  // Return The Buffer
  wasmBinary
}
export let createTableSection = (wasmBinary, dependencyChain) => {
  // Return The Buffer
  wasmBinary
}
export let createMemorySection = (wasmBinary, dependencyChain) => {
  // Return The Buffer
  wasmBinary
}
export let createGlobalSection = (wasmBinary, dependencyChain) => {
  // Return The Buffer
  wasmBinary
}
export let createExportSection = (wasmBinary, dependencyChain) => {
  // Return The Buffer
  wasmBinary
}
export let createStartSection = (wasmBinary, dependencyChain) => {
  // TODO: Set The Start Function To The Last Function As The Last Function is our new entry point
  // Return The Buffer
  wasmBinary
}
export let createElementSection = (wasmBinary, dependencyChain) => {
  // Return The Buffer
  wasmBinary
}
export let createCodeSection = (wasmBinary, dependencyChain) => {
  let mut codeCount = 0
  let mut codeSection = Buffer.make(0)
  // For Each Dependency
  List.forEach((dependency: DecodeFile.FileData) => {
    print("===============")
    // Get The CodeStream
    let codeStream = getCodeSection(dependency.wasmSections)
    // Get The Function Count
    let functionCount = Stream.nextUIntLEB128(codeStream)
    for (let mut i = 0; i < functionCount; i += 1) {
      // For Each Reference
      match (List.nth(i, dependency.codeReferences)) {
        Some(funcRefs) => {
          // Get The Function Size
          let functionEnd = Stream.nextUIntLEB128(codeStream) +
            codeStream.position
          print(codeStream)
          // Create A Temporary Buffer
          let mut funcBuffer = Buffer.make(0)
          // For Each Reference
          let mut lastPosition = 0
          List.forEach(ref => {
            // Get The Related Information
            let (
              refPosition, refOffset, refImportOffset, refImportCount,
            ) = match (ref) {
              DecodeSection.FunctionRef(ref) => {
                (
                  ref,
                  dependency.offsetData.functionOffset,
                  dependency.offsetData.importFunctionOffset,
                  dependency.offsetData.importFunctionCount,
                )
              },
              DecodeSection.TypeRef(ref) => {
                (ref, dependency.offsetData.typeOffset, 0, 0)
              },
              DecodeSection.GlobalRef(ref) => {
                (
                  ref,
                  dependency.offsetData.globalOffset,
                  dependency.offsetData.importGlobalOffset,
                  dependency.offsetData.importGlobalCount,
                )
              },
            }
            // Copy The Stuff Before The Reference
            Buffer.addBytes(
              Stream.nextSliceBytes(codeStream, refPosition - lastPosition),
              funcBuffer
            )
            // Set The Last Position
            lastPosition = refPosition
            // Write The Mapped Reference
            print(ref)
            let refValue = Stream.nextUIntLEB128(codeStream)
            print(refValue)
            let refValue = if (refValue < refImportCount) refValue + refOffset
              else refValue +
              refImportCount
            funcBuffer = appendBufferByteList(
              funcBuffer,
              Encoder.encodeUIntLeb128(refValue)
            )
          }, funcRefs)
          print(Stream.remainingLength(codeStream))
          // Write The Remaining Stuff
          Buffer.addBytes(
            Stream.nextSliceBytes(
              codeStream,
              functionEnd - codeStream.position
            ),
            funcBuffer
          )
          // Write Function Header
          let codeSection = appendBufferByteList(
            codeSection,
            Encoder.encodeUIntLeb128(Buffer.length(funcBuffer))
          ) // Write Function Size
          Buffer.addBuffer(funcBuffer, codeSection)
        },
        None => fail "Could Not Find Related Linking Info",
      }
      // Increment The Code Count
      codeCount += 1
    }
  }, dependencyChain)
  // TODO: Add An Additional Function For The New Entry Function
  // Write The Section Header
  let wasmBinary = appendBufferByte(wasmBinary, 0x0a) // Write Section ID
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(Buffer.length(codeSection) + 1)
  ) // Write Section Size
  let wasmBinary = appendBufferByteList(
    wasmBinary,
    Encoder.encodeUIntLeb128(codeCount)
  ) // Write Code Count
  // Append The Function Section To The WasmBinary
  if (Buffer.length(codeSection) != 0) Buffer.addBuffer(codeSection, wasmBinary)
  // Return The Buffer
  wasmBinary
}
export let createDataSection = (wasmBinary, dependencyChain) => {
  // Create Data Section
  // Create Data Count Section
  // Return The Buffer
  wasmBinary
}
// Build The File
export let buildFile = dependencyChain => {
  // Create The Buffer To Hold The File
  let wasmBinary = Buffer.make(0)
  // Add The Magic Wasm Headers
  let wasmBinary = appendBufferByteList(wasmBinary, [0x00, 0x61, 0x73, 0x6d])
  let wasmBinary = appendBufferByteList(wasmBinary, [0x01, 0x00, 0x00, 0x00])
  // TODO: Create The Custom Sections
  // TODO: Remap The Name Section
  // TODO: Build A New Linking Info Sections
  // Build Sections
  let wasmBinary = createTypeSection(wasmBinary, dependencyChain)
  let wasmBinary = createImportSection(wasmBinary, dependencyChain)
  let wasmBinary = createFuncSection(wasmBinary, dependencyChain)
  let wasmBinary = createTableSection(wasmBinary, dependencyChain)
  let wasmBinary = createMemorySection(wasmBinary, dependencyChain)
  let wasmBinary = createGlobalSection(wasmBinary, dependencyChain)
  let wasmBinary = createExportSection(wasmBinary, dependencyChain)
  let wasmBinary = createStartSection(wasmBinary, dependencyChain)
  let wasmBinary = createElementSection(wasmBinary, dependencyChain)
  let wasmBinary = createCodeSection(wasmBinary, dependencyChain)
  let wasmBinary = createDataSection(wasmBinary, dependencyChain)
  // Return The File
  Buffer.toString(wasmBinary)
}
