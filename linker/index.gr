module Linker

// Imports
include "map"
include "list"
include "stack"
include "./Decoder/DecodeFile"
include "./BuildFile"
from DecodeFile use { decodeFile }
from Builder use { buildFile }
// TODO: Switch To A Graph Data Type
// Linker Entry Function
provide let link = (entryFile, fileReader, pathAbsolute) => {
  // Create Dependency Graph
  let dependencyGraph = Map.make()
  let mut dependencyChain = []
  let mut unparsedDependencies = Stack.make()
  // Add Entry File To List
  Stack.push(entryFile, unparsedDependencies)
  while (!Stack.isEmpty(unparsedDependencies)) {
    // Get The File From The Stack
    let fileName = Stack.peek(unparsedDependencies)
    match (fileName) {
      Some(fileName) => {
        Stack.pop(unparsedDependencies)
        // If we have already parsed this then skip it
        if (Map.contains(fileName, dependencyGraph)) continue
        // Read File
        let fileContents = match (fileReader(fileName)) {
          Ok(contents) => contents,
          Err(err) => fail err,
        }
        // Parse File
        let fileData = decodeFile(fileName, fileContents)
        // Convert Dependency File Paths From Relative To Absolute
        Map.forEach((filePath, path) => {
          Map.set(filePath, pathAbsolute(fileName, path), fileData.dependencies)
        }, fileData.dependencies)
        // Mark Entry File
        if (fileName == entryFile) fileData.isEntry = true
        // Add File To Dependency Graph
        dependencyChain = [fileData, ...dependencyChain]
        Map.set(fileName, fileData, dependencyGraph)
        // Add The Dependencies To The unparsed Stack
        List.forEach(filePath => {
          Stack.push(filePath, unparsedDependencies)
        }, Map.values(fileData.dependencies))
      },
      None => break,
    }
  }
  // TODO: Sort The Dependency Graph
  let dependencyChain = dependencyChain
  // Build The Linked File
  let wasmOutput = buildFile(dependencyChain)
  // Return The File
  wasmOutput
}
