import String from "string"
import Array from "array"
import List from "list"
// Path Helpers
export let getPathData = path => {
  let path = Array.join("/", String.split("\\", path))
  let pathSegments = Array.toList(String.split("/", path))
  let (path, name) = match (List.reverse(pathSegments)) {
    [ name, ...rest ] => {
      // Check if name is a file name
      if (String.contains(".", name) && !String.startsWith(".", name)) {
        (
          List.join("/", List.reverse(rest)) ++ "/",
          name
        )
      } else {
        (
          List.join("/", List.append(List.reverse(rest), [name])) ++ "/",
          ""
        )
      }
    },
    path => (
      List.join("/", List.reverse(path)) ++ "/",
      ""
    )
  }
  // Return Record
  (path, name)
}
export let getFilePath = path => {
  let (path, name) = getPathData(path)
  path
}
export let getFileName = path => {
  let (path, name) = getPathData(path)
  name
}
// normalizePath
export let normalizePath = path => {
  let mut outputPath = []
  // Replace \ with /
  // TODO: Use String.replace
  let path = Array.join("/", String.split("\\", path))
  // Split path into segments
  let pathSegments = String.split("/", path)
  // Resolve .. and .
  Array.forEach(pathSegment => match (pathSegment) {
    "." => void,
    ".." => {
      match (List.head(outputPath)) {
        None | Some("..") => outputPath = [pathSegment, ...outputPath],
        Some(_) => outputPath = List.drop(1, outputPath),
      }
    },
    _ => outputPath = [pathSegment, ...outputPath],
  }, pathSegments)
  // Join The End String
  List.join("/", List.reverse(outputPath))
}
// Resolves Two Paths Into The Base Path Relative To The Entry File
export let resolvePath = (parentPath, childPath) => {
  // Remove fileName from parentPath
  let parentPath = getFilePath(parentPath)
  // TODO: Ensure path is not absolute
  // Normalize The Path
  normalizePath(parentPath ++ childPath)
}
