module WasmDecoder

// Imports
include "list"
include "../stream"
// Types
provide enum rec WasmType {
  WasmI32,
  WasmI64,
  WasmF32,
  WasmF64,
  WasmFuncType(List<WasmType>, List<WasmType>),
}
provide enum WasmImportDescription {
  FunctionImport(Number),
  // TODO: Table Import
  MemoryImport(Number, Option<Number>),
  GlobalImport(Bool, WasmType),
}
provide enum ExternKind {
  FuncKind,
  TableKind,
  MemoryKind,
  GlobalKind,
}
provide record WasmImport {
  importModule: String,
  importName: String,
  importKind: ExternKind,
  mut briskImport: Bool,
  mut localIndex: Option<Number>,
  importDescription: WasmImportDescription,
}
provide record WasmExport {
  exportName: String,
  exportKind: ExternKind,
  mut briskExport: Bool,
  exportIndex: Number,
}
// Functions
provide let decodeWasmType = stream => {
  // Get Wasm Type
  let wasmType = Stream.nextByte(stream)
  match (wasmType) {
    0x7f => WasmI32,
    0x7e => WasmI64,
    0x7d => WasmF32,
    0x7c => WasmF64,
    _ => fail "Invalid Wasm Type: ",
  }
}
provide let decodeTypeReference = (wasmTypes, typeIndex) =>
  match (List.nth(typeIndex, wasmTypes)) {
    Some(wasmType) => wasmType,
    None => fail "Invalid Wasm Type Reference",
  }
provide let decodeWasmImport = wasmStream => {
  // Get The Import Module
  let importModule = Stream.nextString(wasmStream)
  // Get The Import Name
  let importName = Stream.nextString(wasmStream)
  // Get The Import Type
  let importKind = Stream.nextByte(wasmStream)
  // Decode Import Description
  let (importKind, importDescription) = match (importKind) {
    // Function Import
    0x00 => {
      // Get The Function Type Index
      let functionIndex = Stream.nextUIntLEB128(wasmStream)
      (FuncKind, FunctionImport(functionIndex))
    },
    // TODO: Table Import
    0x01 => fail "Table Import Not Yet Implemented",
    0x02 => {
      let limitType = Stream.nextByte(wasmStream)
      let (min, max) = match (limitType) {
        0x00 => {
          let min = Stream.nextUIntLEB128(wasmStream)
          let max = Stream.nextUIntLEB128(wasmStream)
          (min, Some(max))
        },
        0x01 => {
          let min = Stream.nextUIntLEB128(wasmStream)
          (min, None)
        },
        _ => fail "Invalid Memory Limit Type",
      }
      (MemoryKind, MemoryImport(min, max))
    },
    // Global Import
    0x03 => {
      // Get Global Type
      let globalType = decodeWasmType(wasmStream)
      // Get Global Mutability
      let globalMutable = Stream.nextByte(wasmStream) == 0x01
      // Return Description
      (GlobalKind, GlobalImport(globalMutable, globalType))
    },
    _ => fail "Invalid Import Kind",
  }
  // Return Package
  {
    importModule,
    importName,
    importKind,
    briskImport: false,
    localIndex: None,
    importDescription,
  }
}
provide let decodeWasmExport = wasmStream => {
  let exportName = Stream.nextString(wasmStream)
  let exportKind = Stream.nextByte(wasmStream)
  let exportIndex = Stream.nextUIntLEB128(wasmStream)
  // Map the Export Kind
  let exportKind = match (exportKind) {
    0x00 => FuncKind,
    0x01 => TableKind,
    0x02 => MemoryKind,
    0x03 => GlobalKind,
    _ => fail "Invalid Export Kind",
  }
  // Return The Export
  { exportName, exportKind, exportIndex, briskExport: false }
}
