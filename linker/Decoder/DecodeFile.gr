// Imports
import List from "list"
import String from "string"
import Stream from "../Stream"
import { WasmSection, decodeLinkingSection, decodeFile, decodeImportSection } from "./DecodeSection"
import { WasmImport } from "./WasmDecoder"
// Types
export record FileData {
  // Module Data
  importIdentifier: String,
  // Raw Module
  wasmSections: List<WasmSection>,
  wasmBinary: Bytes,
  // Parsed Section Data
  wasmImports: List<WasmImport>,
  // References
  functionReferences: List<Number>,
  typeReferences: List<Number>,
  globalReferences: List<Number>,
  mut dependencies: List<String>,
}
// Decodes A Wasm File
export let decodeFile = wasmBinary => {
  // Create Our Stream
  let stream = Stream.fromBytes(wasmBinary)
  // Ensure The File Is Valid
  if (Stream.nextSliceList(stream, 4) != [0x00, 0x61, 0x73, 0x6d]) {
    fail "File Missing Wasm Magic Number"
  }
  if (Stream.nextSliceList(stream, 4) != [0x01, 0x00, 0x00, 0x00]) {
    fail "File Missing Wasm Version"
  }
  // Split File Into Sections
  let wasmSections = decodeFile(stream)
  // Parse LinkingInfo Section
  let linkingInfo = decodeLinkingSection(wasmSections)
  // Parse Import Section
  let imports = decodeImportSection(wasmSections)
  // Parse Section Headers To Determine The Number Of Things Like Functions, Globals, Imports, Exports, And other important data
  // Find Relevant Imports
  // TODO: I Should not need a type cast there, but the inferring seems to be broken
  let imports = List.map((importData: WasmImport) => {
    importData.briskImport = String.startsWith(linkingInfo.importIdentifier, importData.importModule)
    importData
  }, imports)
  let briskImports = List.filter((importData: WasmImport) => importData.briskImport, imports)
  let briskImports = List.map((importData: WasmImport) => {
    String.slice(
      String.length(linkingInfo.importIdentifier),
      String.length(importData.importModule),
      importData.importModule
    )
  }, briskImports)
  // Return A Result
  {
    importIdentifier: linkingInfo.importIdentifier,
    wasmSections,
    wasmBinary,
    wasmImports: imports,
    functionReferences: linkingInfo.functionReferences,
    typeReferences: linkingInfo.typeReferences,
    globalReferences: linkingInfo.globalReferences,
    dependencies: briskImports,
  }
}
