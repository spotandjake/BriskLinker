module DecodeFile

// Imports
include "list"
include "string"
include "../stream"
include "map"
include "./DecodeSection"
include "./WasmDecoder"
from DecodeSection use {
  decodeLinkingSection,
  decodeFile,
  decodeImportSection,
  decodeExportSection,
}
// Types
provide record OffsetData {
  // Normal Offsets
  mut functionTableOffset: Number,
  // Import Counts
  mut importGlobalCount: Number,
  mut importFunctionCount: Number,
  // Maps
  globalMap: Map.Map<Number, Number>,
  funcMap: Map.Map<Number, Number>,
  typeMap: Map.Map<Number, Number>,
}
provide record FileData {
  // Module Data
  modulePath: String,
  importIdentifier: String,
  mut isEntry: Bool,
  // Raw Module
  wasmSections: List<DecodeSection.WasmSection>,
  wasmBinary: Bytes,
  // Parsed Section Data
  wasmImports: List<WasmDecoder.WasmImport>,
  wasmExports: List<WasmDecoder.WasmExport>,
  // References
  codeReferences: List<List<DecodeSection.CodeReference>>,
  // Dependencies
  mut dependencies: Map.Map<String, String>,
  // OffsetData
  mut offsetData: OffsetData,
}
// Decodes A Wasm File
provide let decodeFile = (modulePath, wasmBinary) => {
  // Create Our Stream
  let stream = Stream.fromBytes(wasmBinary)
  // Ensure The File Is Valid
  if (
    Stream.nextSliceList(stream, 8) !=
    [0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00]
  ) {
    fail "File Missing Wasm Magic Number, Or Wasm Version"
  }
  // Split File Into Sections
  let wasmSections = decodeFile(stream)
  // Parse LinkingInfo Section
  let linkingInfo = decodeLinkingSection(wasmSections)
  // Parse Import Section
  let imports = decodeImportSection(wasmSections)
  // Parse The Export Section
  let exports = decodeExportSection(wasmSections)
  let exports = List.map((exportData: WasmDecoder.WasmExport) => {
    exportData.briskExport = String.startsWith(
      linkingInfo.importIdentifier,
      exportData.exportName
    )
    exportData
  }, exports)
  // Find Relevant Imports
  let imports = List.map((importData: WasmDecoder.WasmImport) => {
    importData.briskImport = String.startsWith(
      linkingInfo.importIdentifier,
      importData.importModule
    )
    importData
  }, imports)
  let briskImports = List.filter((importData: WasmDecoder.WasmImport) =>
    importData.briskImport, imports)
  let dependencies = Map.fromList(
    List.map((importData: WasmDecoder.WasmImport) => {
      (
        importData.importModule,
        String.slice(
          String.length(linkingInfo.importIdentifier),
          end=String.length(importData.importModule),
          importData.importModule
        ),
      )
    }, briskImports)
  )
  // Return A Result
  {
    modulePath,
    importIdentifier: linkingInfo.importIdentifier,
    isEntry: false,
    wasmSections,
    wasmBinary,
    wasmImports: imports,
    wasmExports: exports,
    codeReferences: linkingInfo.codeReferences,
    dependencies,
    offsetData: {
      // Import Counts
      importGlobalCount: 0,
      importFunctionCount: 0,
      // Import Offsets
      functionTableOffset: 0,
      // Maps
      globalMap: Map.make(),
      funcMap: Map.make(),
      typeMap: Map.make(),
    },
  }
}
