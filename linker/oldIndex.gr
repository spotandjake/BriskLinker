import Map from "map"
import List from "list"
import Stack from "stack"
import DecodeFile, { decodeFile } from "./Decoder/DecodeFile"
import { buildFile } from "./BuildFile"
// TODO: Switch To A Graph Data Type
// Linker Entry Function
export let link = (entryFile, fileReader, pathAbsolute) => {
  // Create Dependency Graph
  let dependencyGraph = Map.make()
  let mut unparsedDependencies = Stack.make()
  // Add Entry File To List
  unparsedDependencies = Stack.push(entryFile, unparsedDependencies)
  while (!Stack.isEmpty(unparsedDependencies)) {
    // Get The File From The Stack
    let fileName = Stack.peek(unparsedDependencies)
    match (fileName) {
      Some(fileName) => {
        unparsedDependencies = Stack.pop(unparsedDependencies)
        // If we have already parsed this then skip it
        if (Map.contains(fileName, dependencyGraph)) continue
        // Read File
        let fileContents = fileReader(fileName)
        // Parse File
        let fileData = decodeFile(fileContents)
        // Convert Dependency File Paths From Relative To Absolute
        fileData.dependencies = List.map(filePath =>
          pathAbsolute(fileName, filePath), fileData.dependencies)
        // Add File To Dependency Graph
        Map.set(fileName, fileData, dependencyGraph)
        // Add The Dependencies To The unparsed Stack
        List.forEach(filePath => {
          unparsedDependencies = Stack.push(filePath, unparsedDependencies)
        }, fileData.dependencies)
      },
      None => break,
    }
  }
  // TODO: Sort The Dependency Graph
  let dependencyChain = Map.values(dependencyGraph)
  // Build The Linked File
  let wasmOutput = buildFile(dependencyChain)
  // Return The File
  wasmOutput
}
