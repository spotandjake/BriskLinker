module Main

// Imports
include "bytes"
include "sys/file"
include "sys/process"
include "int64"
include "string"
include "path"
include "./linker/ResolvePath"
include "./linker/index"
include "./fs"
from ResolvePath use { resolvePath }
from Linker use { link }

record Arguments {
  inFile: Option<String>,
  outFile: Option<String>,
}
// Definition For Write File
let writeFile = (filePath, fileContents) => {
  match (Fs.writeFile(Path.fromString(filePath), fileContents)) {
    Err(err) => fail toString(err),
    Ok(_) => void,
  }
}
// Definition For ReadFile
let readFile = filePath => {
  match (Fs.readFile(Path.fromString(filePath))) {
    Err(err) => Err(toString(err)),
    Ok(fileContents) => Ok(fileContents),
  }
}
// Perform Linking
let linkBuild = (filePath, outputPath) => {
  // Link The File
  let wasmOutput = link(filePath, readFile, resolvePath)
  // Write The output File
  writeFile(outputPath, wasmOutput)
}
// Deal With Command Line Arguments
// TODO: Replace with argument parser library
let (input, output) = match (Process.argv()) {
  Ok([> node, grain, _, input, output]) when (
    String.endsWith("node", node) && String.endsWith("grain", grain)
  ) =>
    (input, output),
  Ok([> node, grain, _, "--release", input, output]) when (
    String.endsWith("node", node) && String.endsWith("grain", grain)
  ) =>
    (input, output),
  Ok([> file, input, output]) when !String.endsWith("node", file) =>
    (input, output),
  Ok([> file, input]) when !String.endsWith("node", file) =>
    fail "Output file was not provided",
  Err(err) => throw err,
  _ => fail "Input/Output file was not provided",
}
// link The Build
linkBuild(input, output)
