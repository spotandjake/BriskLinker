// Imports
import Bytes from "bytes"
import File from "sys/file"
import Process from "sys/process"
import Result from "result"
import Int64 from "int64"
import String from "string"
import {
  resolvePath,
} from "./linker/ResolvePath" // TODO: Replace with the path library once it's implemented
import { link } from "./linker/index"
record Arguments {
  inFile: Option<String>,
  outFile: Option<String>,
}
// Definition For Write File
let writeFile = (filePath, fileContents) => {
  // TODO: if the file already exists this does not work
  // Open The File
  let fd = File.pathOpen(
    File.pwdfd,
    [File.SymlinkFollow],
    filePath,
    [File.Create],
    [File.FdWrite],
    [File.FdWrite],
    []
  )
  // Read The File Contents
  match (fd) {
    Ok(descriptor) => {
      // Write The File Contents
      let writeSuccess = File.fdWrite(descriptor, fileContents)
      match (writeSuccess) {
        Ok(_) => void,
        Err(_) => fail "[Error Writing File: " ++ filePath ++ "]",
      }
    },
    Err(_) => fail "[Error: " ++ filePath ++ "]",
  }
}
// Definition For ReadFile
let readFile = filePath => {
  // Open The File
  let fd = File.pathOpen(
    File.pwdfd,
    [File.SymlinkFollow],
    filePath,
    [File.Exclusive],
    [File.FdRead, File.FdFilestats],
    [File.FdRead],
    []
  )
  // Read The File Contents
  match (fd) {
    Ok(descriptor) => {
      match (File.fdFilestats(descriptor)) {
        Ok(stats) =>
          match (File.fdRead(descriptor, Int64.toNumber(stats.size))) {
            Ok((contents, _)) => Ok(Bytes.fromString(contents)),
            Err(err) => throw err,
          },
        Err(err) => throw err,
      }
    },
    Err(_) => Err("[Error: " ++ filePath ++ "]"),
  }
}
// Perform Linking
let linkBuild = (filePath, outputPath) => {
  // Link The File
  let wasmOutput = link(filePath, readFile, resolvePath)
  // Write The output File
  writeFile(outputPath, wasmOutput)
}
// Deal With Command Line Arguments
// TODO: Replace with argument parser library
let (input, output) = match (Process.argv()) {
  Ok([> node, grain, _, input, output]) when (
    String.endsWith("node", node) && String.endsWith("grain", grain)
  ) =>
    (input, output),
  Ok([> file, input, output]) when !String.endsWith("node", file) =>
    (input, output),
  Err(err) => throw err,
  _ => fail "Input/Output file was not provided",
}
// link The Build
linkBuild(input, output)
