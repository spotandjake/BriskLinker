// Imports
import Bytes from "bytes"
import File from "sys/file"
import Result from "result"
import Option from "option"
import Int64 from "int64"
import String from "string"
import { link } from "./linker/index"
// Definition For Write File
let writeFile = (filePath, fileContents) => {
  // TODO: if the file already exists this does not work
  // Open The File
  let fd = File.pathOpen(
    File.pwdfd,
    [File.SymlinkFollow],
    filePath,
    [File.Create],
    [File.FdWrite],
    [File.FdWrite],
    []
  )
  // Read The File Contents
  match (fd) {
    Ok(descriptor) => {
      // Write The File Contents
      let writeSuccess = File.fdWrite(descriptor, fileContents)
      match (writeSuccess) {
        Ok(_) => void,
        Err(error) =>
          fail "[Error Writing File: " ++
          filePath ++
          "]: " ++
          toString(error),
      }
    },
    // TODO: Return Err
    Err(error) => fail "[Error: " ++ filePath ++ "]: " ++ toString(error),
  }
}
// Definition For ReadFile
let readFile = filePath => {
  // Open The File
  let fd = File.pathOpen(
    File.pwdfd,
    [File.SymlinkFollow],
    filePath,
    [File.Exclusive],
    [File.FdRead, File.FdFilestats],
    [File.FdRead],
    []
  )
  // Read The File Contents
  match (fd) {
    Ok(descriptor) => {
      let stats = Result.unwrap(File.fdFilestats(descriptor))
      let (contents, _) = Result.unwrap(
        File.fdRead(descriptor, Int64.toNumber(stats.size))
      )
      Bytes.fromString(contents)
    },
    // TODO: Return Err
    Err(error) => fail "[Error: " ++ filePath ++ "]: " ++ toString(error),
  }
}
// Definition For pathAbsolute
let pathAbsolute = (parentPath, filePath) => {
  // TODO: Develop A Nice Module For Handling File Paths
  // TODO: Replace this with something that works better
  // Remove The File Name From The ParentPath
  let parentPath = String.slice(
    0,
    String.length(parentPath) -
    Option.unwrapWithDefault(
      0,
      String.indexOf("/", String.reverse(parentPath))
    ),
    parentPath
  )
  // TODO: Resolve Path
  parentPath ++ filePath
}
// Perform Linking
let linkBuild = (filePath, outputPath) => {
  // Link The File
  let wasmOutput = link(filePath, readFile, pathAbsolute)
  // Write The output File
  writeFile(outputPath, wasmOutput)
}

// link The Build
linkBuild("./TestCases/Linker.br.wasm", "./TestCases/Linker_Linked.br.wasm")
// Imports
// Imports
// Imports
